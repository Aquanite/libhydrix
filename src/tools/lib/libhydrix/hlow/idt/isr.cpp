#include <libhydrix/hlow/idt/isr.h>
#include <libhydrix/hio/io.h>
#include <libhydrix/hgl/color.h>

Console *HY_IDT_CONSOLE;
void SetISRConsole(Console *console)
{
    HY_IDT_CONSOLE = console;
}

void InitializeISR() {
  SetIDTGate(0, (uint64_t)isr0);
  SetIDTGate(1, (uint64_t)isr1);
  SetIDTGate(2, (uint64_t)isr2);
  SetIDTGate(3, (uint64_t)isr3);
  SetIDTGate(4, (uint64_t)isr4);
  SetIDTGate(5, (uint64_t)isr5);
  SetIDTGate(6, (uint64_t)isr6);
  SetIDTGate(7, (uint64_t)isr7);
  SetIDTGate(8, (uint64_t)errorIsr8);
  SetIDTGate(9, (uint64_t)isr9);
  SetIDTGate(10, (uint64_t)errorIsr10);
  SetIDTGate(11, (uint64_t)errorIsr11);
  SetIDTGate(12, (uint64_t)errorIsr12);
  SetIDTGate(13, (uint64_t)errorIsr13);
  SetIDTGate(14, (uint64_t)errorIsr14);
  SetIDTGate(15, (uint64_t)isr15);
  SetIDTGate(16, (uint64_t)isr16);
  SetIDTGate(17, (uint64_t)isr17);
  SetIDTGate(18, (uint64_t)isr18);
  SetIDTGate(19, (uint64_t)isr19);
  SetIDTGate(20, (uint64_t)isr20);
  SetIDTGate(21, (uint64_t)isr21);
  SetIDTGate(22, (uint64_t)isr22);
  SetIDTGate(23, (uint64_t)isr23);
  SetIDTGate(24, (uint64_t)isr24);
  SetIDTGate(25, (uint64_t)isr25);
  SetIDTGate(26, (uint64_t)isr26);
  SetIDTGate(27, (uint64_t)isr27);
  SetIDTGate(28, (uint64_t)isr28);
  SetIDTGate(29, (uint64_t)isr29);
  SetIDTGate(30, (uint64_t)isr30);
  SetIDTGate(31, (uint64_t)isr31);
  PortIO::OutByte(0x20, 0x11);
  PortIO::OutByte(0xA0, 0x11);
  PortIO::OutByte(0x21, 0x20);
  PortIO::OutByte(0xA1, 0x28);
  PortIO::OutByte(0x21, 0x04);
  PortIO::OutByte(0xA1, 0x02);
  PortIO::OutByte(0x21, 0x01);
  PortIO::OutByte(0xA1, 0x01);
  PortIO::OutByte(0x21, 0x0);
  PortIO::OutByte(0xA1, 0x0);
  SetIDTGate(32, (uint64_t)isr32);
  SetIDTGate(33, (uint64_t)isr33);
  SetIDTGate(34, (uint64_t)isr34);
  SetIDTGate(35, (uint64_t)isr35);
  SetIDTGate(36, (uint64_t)isr36);
  SetIDTGate(37, (uint64_t)isr37);
  SetIDTGate(38, (uint64_t)isr38);
  SetIDTGate(39, (uint64_t)isr39);
  SetIDTGate(40, (uint64_t)isr40);
  SetIDTGate(41, (uint64_t)isr41);
  SetIDTGate(42, (uint64_t)isr42);
  SetIDTGate(43, (uint64_t)isr43);
  SetIDTGate(44, (uint64_t)isr44);
  SetIDTGate(45, (uint64_t)isr45);
  SetIDTGate(46, (uint64_t)isr46);
  SetIDTGate(47, (uint64_t)isr47);
  SetIDTGate(48, (uint64_t)isr48);
  SetIDTGate(49, (uint64_t)isr49);
  SetIDTGate(50, (uint64_t)isr50);
  SetIDTGate(51, (uint64_t)isr51);
  SetIDTGate(52, (uint64_t)isr52);
  SetIDTGate(53, (uint64_t)isr53);
  SetIDTGate(54, (uint64_t)isr54);
  SetIDTGate(55, (uint64_t)isr55);
  SetIDTGate(56, (uint64_t)isr56);
  SetIDTGate(57, (uint64_t)isr57);
  SetIDTGate(58, (uint64_t)isr58);
  SetIDTGate(59, (uint64_t)isr59);
  SetIDTGate(60, (uint64_t)isr60);
  SetIDTGate(61, (uint64_t)isr61);
  SetIDTGate(62, (uint64_t)isr62);
  SetIDTGate(63, (uint64_t)isr63);
  SetIDTGate(64, (uint64_t)isr64);
  SetIDTGate(65, (uint64_t)isr65);
  SetIDTGate(66, (uint64_t)isr66);
  SetIDTGate(67, (uint64_t)isr67);
  SetIDTGate(68, (uint64_t)isr68);
  SetIDTGate(69, (uint64_t)isr69);
  SetIDTGate(70, (uint64_t)isr70);
  SetIDTGate(71, (uint64_t)isr71);
  SetIDTGate(72, (uint64_t)isr72);
  SetIDTGate(73, (uint64_t)isr73);
  SetIDTGate(74, (uint64_t)isr74);
  SetIDTGate(75, (uint64_t)isr75);
  SetIDTGate(76, (uint64_t)isr76);
  SetIDTGate(77, (uint64_t)isr77);
  SetIDTGate(78, (uint64_t)isr78);
  SetIDTGate(79, (uint64_t)isr79);
  SetIDTGate(80, (uint64_t)isr80);
  SetIDTGate(81, (uint64_t)isr81);
  SetIDTGate(82, (uint64_t)isr82);
  SetIDTGate(83, (uint64_t)isr83);
  SetIDTGate(84, (uint64_t)isr84);
  SetIDTGate(85, (uint64_t)isr85);
  SetIDTGate(86, (uint64_t)isr86);
  SetIDTGate(87, (uint64_t)isr87);
  SetIDTGate(88, (uint64_t)isr88);
  SetIDTGate(89, (uint64_t)isr89);
  SetIDTGate(90, (uint64_t)isr90);
  SetIDTGate(91, (uint64_t)isr91);
  SetIDTGate(92, (uint64_t)isr92);
  SetIDTGate(93, (uint64_t)isr93);
  SetIDTGate(94, (uint64_t)isr94);
  SetIDTGate(95, (uint64_t)isr95);
  SetIDTGate(96, (uint64_t)isr96);
  SetIDTGate(97, (uint64_t)isr97);
  SetIDTGate(98, (uint64_t)isr98);
  SetIDTGate(99, (uint64_t)isr99);
  SetIDTGate(100, (uint64_t)isr100);
  SetIDTGate(101, (uint64_t)isr101);
  SetIDTGate(102, (uint64_t)isr102);
  SetIDTGate(103, (uint64_t)isr103);
  SetIDTGate(104, (uint64_t)isr104);
  SetIDTGate(105, (uint64_t)isr105);
  SetIDTGate(106, (uint64_t)isr106);
  SetIDTGate(107, (uint64_t)isr107);
  SetIDTGate(108, (uint64_t)isr108);
  SetIDTGate(109, (uint64_t)isr109);
  SetIDTGate(110, (uint64_t)isr110);
  SetIDTGate(111, (uint64_t)isr111);
  SetIDTGate(112, (uint64_t)isr112);
  SetIDTGate(113, (uint64_t)isr113);
  SetIDTGate(114, (uint64_t)isr114);
  SetIDTGate(115, (uint64_t)isr115);
  SetIDTGate(116, (uint64_t)isr116);
  SetIDTGate(117, (uint64_t)isr117);
  SetIDTGate(118, (uint64_t)isr118);
  SetIDTGate(119, (uint64_t)isr119);
  SetIDTGate(120, (uint64_t)isr120);
  SetIDTGate(121, (uint64_t)isr121);
  SetIDTGate(122, (uint64_t)isr122);
  SetIDTGate(123, (uint64_t)isr123);
  SetIDTGate(124, (uint64_t)isr124);
  SetIDTGate(125, (uint64_t)isr125);
  SetIDTGate(126, (uint64_t)isr126);
  SetIDTGate(127, (uint64_t)isr127);
  SetIDTGate(128, (uint64_t)isr128);
  SetIDTGate(129, (uint64_t)isr129);
  SetIDTGate(130, (uint64_t)isr130);
  SetIDTGate(131, (uint64_t)isr131);
  SetIDTGate(132, (uint64_t)isr132);
  SetIDTGate(133, (uint64_t)isr133);
  SetIDTGate(134, (uint64_t)isr134);
  SetIDTGate(135, (uint64_t)isr135);
  SetIDTGate(136, (uint64_t)isr136);
  SetIDTGate(137, (uint64_t)isr137);
  SetIDTGate(138, (uint64_t)isr138);
  SetIDTGate(139, (uint64_t)isr139);
  SetIDTGate(140, (uint64_t)isr140);
  SetIDTGate(141, (uint64_t)isr141);
  SetIDTGate(142, (uint64_t)isr142);
  SetIDTGate(143, (uint64_t)isr143);
  SetIDTGate(144, (uint64_t)isr144);
  SetIDTGate(145, (uint64_t)isr145);
  SetIDTGate(146, (uint64_t)isr146);
  SetIDTGate(147, (uint64_t)isr147);
  SetIDTGate(148, (uint64_t)isr148);
  SetIDTGate(149, (uint64_t)isr149);
  SetIDTGate(150, (uint64_t)isr150);
  SetIDTGate(151, (uint64_t)isr151);
  SetIDTGate(152, (uint64_t)isr152);
  SetIDTGate(153, (uint64_t)isr153);
  SetIDTGate(154, (uint64_t)isr154);
  SetIDTGate(155, (uint64_t)isr155);
  SetIDTGate(156, (uint64_t)isr156);
  SetIDTGate(157, (uint64_t)isr157);
  SetIDTGate(158, (uint64_t)isr158);
  SetIDTGate(159, (uint64_t)isr159);
  SetIDTGate(160, (uint64_t)isr160);
  SetIDTGate(161, (uint64_t)isr161);
  SetIDTGate(162, (uint64_t)isr162);
  SetIDTGate(163, (uint64_t)isr163);
  SetIDTGate(164, (uint64_t)isr164);
  SetIDTGate(165, (uint64_t)isr165);
  SetIDTGate(166, (uint64_t)isr166);
  SetIDTGate(167, (uint64_t)isr167);
  SetIDTGate(168, (uint64_t)isr168);
  SetIDTGate(169, (uint64_t)isr169);
  SetIDTGate(170, (uint64_t)isr170);
  SetIDTGate(171, (uint64_t)isr171);
  SetIDTGate(172, (uint64_t)isr172);
  SetIDTGate(173, (uint64_t)isr173);
  SetIDTGate(174, (uint64_t)isr174);
  SetIDTGate(175, (uint64_t)isr175);
  SetIDTGate(176, (uint64_t)isr176);
  SetIDTGate(177, (uint64_t)isr177);
  SetIDTGate(178, (uint64_t)isr178);
  SetIDTGate(179, (uint64_t)isr179);
  SetIDTGate(180, (uint64_t)isr180);
  SetIDTGate(181, (uint64_t)isr181);
  SetIDTGate(182, (uint64_t)isr182);
  SetIDTGate(183, (uint64_t)isr183);
  SetIDTGate(184, (uint64_t)isr184);
  SetIDTGate(185, (uint64_t)isr185);
  SetIDTGate(186, (uint64_t)isr186);
  SetIDTGate(187, (uint64_t)isr187);
  SetIDTGate(188, (uint64_t)isr188);
  SetIDTGate(189, (uint64_t)isr189);
  SetIDTGate(190, (uint64_t)isr190);
  SetIDTGate(191, (uint64_t)isr191);
  SetIDTGate(192, (uint64_t)isr192);
  SetIDTGate(193, (uint64_t)isr193);
  SetIDTGate(194, (uint64_t)isr194);
  SetIDTGate(195, (uint64_t)isr195);
  SetIDTGate(196, (uint64_t)isr196);
  SetIDTGate(197, (uint64_t)isr197);
  SetIDTGate(198, (uint64_t)isr198);
  SetIDTGate(199, (uint64_t)isr199);
  SetIDTGate(200, (uint64_t)isr200);
  SetIDTGate(201, (uint64_t)isr201);
  SetIDTGate(202, (uint64_t)isr202);
  SetIDTGate(203, (uint64_t)isr203);
  SetIDTGate(204, (uint64_t)isr204);
  SetIDTGate(205, (uint64_t)isr205);
  SetIDTGate(206, (uint64_t)isr206);
  SetIDTGate(207, (uint64_t)isr207);
  SetIDTGate(208, (uint64_t)isr208);
  SetIDTGate(209, (uint64_t)isr209);
  SetIDTGate(210, (uint64_t)isr210);
  SetIDTGate(211, (uint64_t)isr211);
  SetIDTGate(212, (uint64_t)isr212);
  SetIDTGate(213, (uint64_t)isr213);
  SetIDTGate(214, (uint64_t)isr214);
  SetIDTGate(215, (uint64_t)isr215);
  SetIDTGate(216, (uint64_t)isr216);
  SetIDTGate(217, (uint64_t)isr217);
  SetIDTGate(218, (uint64_t)isr218);
  SetIDTGate(219, (uint64_t)isr219);
  SetIDTGate(220, (uint64_t)isr220);
  SetIDTGate(221, (uint64_t)isr221);
  SetIDTGate(222, (uint64_t)isr222);
  SetIDTGate(223, (uint64_t)isr223);
  SetIDTGate(224, (uint64_t)isr224);
  SetIDTGate(225, (uint64_t)isr225);
  SetIDTGate(226, (uint64_t)isr226);
  SetIDTGate(227, (uint64_t)isr227);
  SetIDTGate(228, (uint64_t)isr228);
  SetIDTGate(229, (uint64_t)isr229);
  SetIDTGate(230, (uint64_t)isr230);
  SetIDTGate(231, (uint64_t)isr231);
  SetIDTGate(232, (uint64_t)isr232);
  SetIDTGate(233, (uint64_t)isr233);
  SetIDTGate(234, (uint64_t)isr234);
  SetIDTGate(235, (uint64_t)isr235);
  SetIDTGate(236, (uint64_t)isr236);
  SetIDTGate(237, (uint64_t)isr237);
  SetIDTGate(238, (uint64_t)isr238);
  SetIDTGate(239, (uint64_t)isr239);
  SetIDTGate(240, (uint64_t)isr240);
  SetIDTGate(241, (uint64_t)isr241);
  SetIDTGate(242, (uint64_t)isr242);
  SetIDTGate(243, (uint64_t)isr243);
  SetIDTGate(244, (uint64_t)isr244);
  SetIDTGate(245, (uint64_t)isr245);
  SetIDTGate(246, (uint64_t)isr246);
  SetIDTGate(247, (uint64_t)isr247);
  SetIDTGate(248, (uint64_t)isr248);
  SetIDTGate(249, (uint64_t)isr249);
  SetIDTGate(250, (uint64_t)isr250);
  SetIDTGate(251, (uint64_t)isr251);
  SetIDTGate(252, (uint64_t)isr252);
  SetIDTGate(253, (uint64_t)isr253);
  SetIDTGate(254, (uint64_t)isr254);
  SetIDTGate(255, (uint64_t)isr255);
  InitializeIDT();
}

void IQR0Handler(registers_t *r) {
  PITTimerHandler(r);
}

extern "C" void ISRHandler(registers_t *r) {
  if (r->isrNumber < 32) {
    uint64_t cr2;
    asm volatile(
        "cli\n"
        "mov %%cr2, %0"
        : "=a"(cr2));

        HY_IDT_CONSOLE->ClearS();
        HY_IDT_CONSOLE->WriteLineS("--[BEGIN KERNEL PANIC]--", IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS("An exception has occured that the kernel cannot recover from.", IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("Interrupt Number: ", ToString(r->isrNumber)), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("Interrupt Error: ", exceptionMessages[r->isrNumber]), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RIP: ", StringConcatenate("0x", ToHexNumberString(r->rip))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RSP: ", StringConcatenate("0x", ToHexNumberString(r->rsp))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RAX: ", StringConcatenate("0x", ToHexNumberString(r->rax))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RBX: ", StringConcatenate("0x", ToHexNumberString(r->rbx))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RCX: ", StringConcatenate("0x", ToHexNumberString(r->rcx))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RDX: ", StringConcatenate("0x", ToHexNumberString(r->rdx))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RBP: ", StringConcatenate("0x", ToHexNumberString(r->rbp))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RDI: ", StringConcatenate("0x", ToHexNumberString(r->rdi))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("RSI: ", StringConcatenate("0x", ToHexNumberString(r->rsi))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R8:  ", StringConcatenate("0x", ToHexNumberString(r->r8))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R9:  ", StringConcatenate("0x", ToHexNumberString(r->r9))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R10: ", StringConcatenate("0x", ToHexNumberString(r->r10))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R11: ", StringConcatenate("0x", ToHexNumberString(r->r11))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R12: ", StringConcatenate("0x", ToHexNumberString(r->r12))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R13: ", StringConcatenate("0x", ToHexNumberString(r->r13))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R14: ", StringConcatenate("0x", ToHexNumberString(r->r14))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("R15: ", StringConcatenate("0x", ToHexNumberString(r->r15))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS(StringConcatenate("CR2: ", StringConcatenate("0x", ToHexNumberString(cr2))), IColor::RGB(255, 0, 0));
        HY_IDT_CONSOLE->WriteLineS("--[END KERNEL PANIC]--", IColor::RGB(255, 0, 0));
        asm volatile("cli");

    for (;;);
  }
  // After every interrupt send an EOI to the PICs or they will not send another interrupt again
  PortIO::OutByte(0xA0, 0x20);
  PortIO::OutByte(0x20, 0x20);

  if (eventHandlers[r->isrNumber] != NULL) eventHandlers[r->isrNumber](r);
}